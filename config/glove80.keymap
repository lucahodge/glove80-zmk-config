/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&none       &none       &none       &none        &none                                                                                                                                 &none        &none           &none       &none         &none
&none       &none       &none       &none        &none        &none                                                                                       &none                        &none        &none           &none       &none         &none
&none       &kp Q       &kp W       &kp E        &kp R        &kp T                                                                                       &kp Y                        &kp U        &kp I           &kp O       &kp P         &none
&none       &mt LGUI A  &mt LALT S  &mt LSHFT D  &mt RCTRL F  &mt LS(LA(LC(LG(LSHFT)))) G                                                                 &mt RS(RA(RC(RG(RSHFT)))) H  &mt RCTRL J  &mt RSHFT K     &mt LALT L  &mt RGUI RET  &none
&none       &kp Z       &kp X       &kp C        &kp V        &kp B                        &none       &none      &none    &none  &none      &none        &kp N                        &kp M        &kp COMMA       &kp DOT     &none         &none
&magic 1 0  &none       &none       &none        &none                                     &lt 3 BSPC  &lt 4 ESC  &none    &none  &lt 5 TAB  &lt 2 SPACE                               &none        &studio_unlock  &none       &none         &none
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        symbols {
            bindings = <
&trans  &trans          &trans       &trans           &trans                                                                                                                                   &trans          &trans             &trans                &trans                 &trans
&trans  &trans          &trans       &trans           &trans           &trans                                                                                 &trans                           &trans          &trans             &trans                &trans                 &trans
&trans  &kp EXCL        &kp AT       &kp HASH         &kp DOLLAR       &kp PERCENT                                                                            &kp CARET                        &kp AMPERSAND   &kp ASTRK          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &mt LGUI GRAVE  &mt LALT LT  &mt LSHFT EQUAL  &mt LCTRL MINUS  &mt LS(LA(LC(LG(LSHFT)))) BACKSLASH                                                    &mt RA(RC(RG(RS(RSHFT)))) SLASH  &mt RCTRL SEMI  &mt LSHFT APOS     &mt RALT LBKT         &mt RGUI RBKT          &trans
&trans  &kp TILDE       &kp GT       &kp PLUS         &kp UNDER        &kp PIPE                             &trans  &trans  &trans    &trans  &trans  &trans  &kp QUESTION                     &kp COLON       &kp DOUBLE_QUOTES  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans
&trans  &trans          &trans       &trans           &trans                                                &trans  &trans  &trans    &trans  &trans  &trans                                   &trans          &trans             &trans                &trans                 &trans
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                                   &trans        &trans        &trans       &trans            &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans                                 &trans        &trans        &trans       &trans            &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                                    &kp KP_DIVIDE                          &kp N7        &kp N8        &kp N9       &kp KP_MINUS      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &mt RS(RA(RC(RG(RSHFT)))) KP_MULTIPLY  &mt RCTRL N4  &mt RSHFT N5  &mt RALT N6  &mt RGUI KP_PLUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &kp N0                                 &kp N1        &kp N2        &kp N3       &kp KP_DOT        &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans                                         &trans        &trans        &trans       &trans            &trans
            >;
        };

        f {
            bindings = <
&trans  &trans  &trans           &trans                  &trans                                                                              &trans        &trans        &trans       &trans        &trans
&trans  &trans  &trans           &trans                  &trans            &trans                                                    &trans  &trans        &trans        &trans       &trans        &trans
&trans  &trans  &kp C_MUTE       &kp C_VOL_DN            &kp C_VOL_UP      &trans                                                    &trans  &kp F7        &kp F8        &kp F9       &kp F12       &trans
&trans  &trans  &mt LALT C_PREV  &mt LSHFT C_PLAY_PAUSE  &mt RCTRL C_NEXT  &trans                                                    &trans  &mt RCTRL F4  &mt RSHFT F5  &mt RALT F6  &mt RGUI F11  &trans
&trans  &trans  &trans           &trans                  &trans            &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp F1        &kp F2        &kp F3       &kp F10       &trans
&trans  &trans  &trans           &trans                  &trans                    &trans  &trans  &trans    &trans  &trans  &trans          &trans        &trans        &trans       &trans        &trans
            >;
        };

        arrows {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                            &trans          &trans        &trans          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans                          &trans          &trans        &trans          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans                          &trans          &trans        &trans          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &mt RS(RA(RC(RG(RSHFT)))) LEFT  &mt RCTRL DOWN  &mt RSHFT UP  &mt RALT RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans                          &trans          &trans        &trans          &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans                                  &trans          &trans        &trans          &trans  &trans
            >;
        };
    };
};
